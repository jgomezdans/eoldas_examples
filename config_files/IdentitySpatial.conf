# An EOLDAS confioguration file for
# a simple Identity operator and a regulariser

[parameter]
location = ['row','col']
limits = [[1,50,1],[1,100,1]]
names = gamma_row,gamma_col,NDVI
solve = 0,0,1
datatypes = x

[parameter.result]
filename = output/Identity/NDVI_Identity_spatial.params
format = 'PARAMETERS'
help_filename='Set the output state filename'

[parameter.x]
datatype = x
names = $parameter.names
default = 200,200,0
help_default="Set the default values of the states"
apply_grid = True
sd = [1.]*len($parameter.names)
bounds =  [[0.000001,1000000],[0.000001,1000000],[-1,1]]
state = data/Identity/random_ndvi1_spatial.dat
help_state = "set the initial parameters"

[general]
doplot=False
help_do_plot='do plotting'

# define the operators
[operator]
modelr.name=DModel_Operator
modelr.datatypes = x
modelc.name=DModel_Operator
modelc.datatypes = x
obs.name=Operator
obs.datatypes = x,y

# define modelr, the differential operator in row
[operator.modelr.x]
names = gamma_row,$parameter.names[-1]
sd = [1.0]*len($operator.modelr.x.names)
datatype = x

[operator.modelr.rt_model]
model_order=1
help_model_order='The differential model order'
# apply a weak wrap around condition
wraparound=reflexive
help_wraparound='wrap around'

# define modelc, the differential operator in c
[operator.modelc.x]
names = gamma_col,$parameter.names[-1]
sd = [1.0]*len($operator.modelc.x.names)
datatype = x

[operator.modelc.rt_model]
model_order=1
help_model_order='The differential model order'
wraparound=reflexive
help_wraparound='wrap around'

# The observation operator

[operator.obs.x]
names = NDVI
sd = [1.0]
help_sd='Set the observation sd'
datatype = x

[operator.obs.y]
control = [mask]
names = NDVI
sd = [0.15]
help_sd="set the sd for the observations"
datatype = y
state = data/Identity/random_ndvi1_spatial.dat
help_state = "Set the y state vector"

[operator.obs.y.result]
filename = output/Identity/NDVI_fwd_spatial.params
format = 'PARAMETERS'
help_filename = 'Set the fwd modelling result filename'



